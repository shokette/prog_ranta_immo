continue
Property.where('url like "%d%"')
Property.find_by(url: "d")
Property.find_by(url: d)
Property.find_by(url: 1)
Property.find_by(id:)
Property.find_by(id: 1)
Property.find_by 1
Property.find_by
Property.find
params[:id]
params
Property.find(params[:id])
continue
Property.find 1
Property.find 2
Property.find 1
Property.find &
Hike.find 5
Property.find
property.find
params.require(:property).permit(:title, :url, :price, :property_type, :location, :surface, :rooms)
params
continue
refresh_from_openrunner_hike_path(hike, redirect_path: hikes_path)
continue
Hike.first.trail_name
Hike.first.update(trail_name: "mabite") 
Hike.first
Hike
@toto
continue
@toto
@toto.update(trail_name: "toto")
@toto.update
@toto
@toto = Hike.all.first
@toto
Hike.all.first
Hike.all.count
Hikes.all.count
Hike.all
Hike
update
updating
params
@results.first
@results
@result
continue
role.errors
role
role = Role.create(name: 'guide')
Role.create(name: 'guide')
continue
        @hike_path = @hike.hike_path || HikePath.new(hike_id: @hike.id)
@hike.hike_path
continue
@hike.hike_path
continue
@hike_path = HikePath.new(coordinates: params[:hike][:coordinates])
params[:hike][:coordinates]
params[:hike]
params[:hikes]
params
continue
@hike_path
continue
@hike_path
continue
<%= button_to "Sauvegarder le tracé",
               routes_path,
               method: :post,
               params: { points: @points, hike_id: @hike.id },
               class: "btn btn-outline-success" %>
params
continue
@results.sort_by { |hike| hike.last_hiking_date || Date.new(9999, 12, 31) }
pp        @results.sort_by(&:last_hiking_date)
pp        @results.first.last_hiking_date
hike.last_hiking_date
pp        @results.first
        @results.first
        @results = fetch_hikes
continue
@hike.save
exit
continue
HikeHistory.joins(:hike)
                   .sum('hikes.distance_km')
continue
HikeHistory.joins(:hike)
                   .sum('hikes.distance_km')
continue
HikeHistory.all.sum(:
Hike.joins(:latest_history)
            .sum(:elevation_gain)
continue
@hike_history
continue
@hike_history
continue
params[:redirect_path].present?
params[:search].present?
params[:search]
params
continue
HikeHistory.joins(:guide)
                   .where('hiking_date >= ?', 1.year.ago).size
HikeHistory.where('hiking_date >= ?', 1.year.ago).size
HikeHistory.where('hiking_date >= ?', 1.year.ago)
HikeHistory..where('hiking_date >= ?', 1.year.ago)
HikeHistory.first
HikeHistory.joins(:guide)
                   .where('hiking_date >= ?', 1.year.ago).size
HikeHistory.joins(:guide)
                   .where('hiking_date >= ?', 1.year.ago)
HikeHistory.joins(:guide)
                   .where('hiking_date >= ?', 1.year.ago)
                   .where.not(guides: { name: nil })
                   .group('guides.name').size
HikeHistory.joins(:guide)
                   .where('hiking_date >= ?', 1.year.ago)
                   .where.not(guides: { name: nil })
                   .group('guides.name')
continue
@stats[:guide_stat
continue
 HikeHistory.joins(:guide)
                   .where('hiking_date >= ?', 1.year.ago)
                   .where.not(guides: { name: nil })
                   .group('guides.name')
                   .order(Arel.sql('count(*) DESC'))
                   .limit(10)
 HikeHistory.joins(:guide)
                   .where('hiking_date >= ?', 1.year.ago)
                   .where.not(guides: { name: nil })
                   .group('guides.name')
                   .order(Arel.sql('count(*) DESC'))
                   .limit(10)
continue
raw @stats[:guide_stats]
continue
fetch_hikes
params
continue
scope
params
 scope.search_by_term(params[:search]).size
 scope.search_by_term(params[:search])
params
prams
continue
mars_events = HikeHistory.where('hiking_date >= ?', 1.year.ago)
                                 .where("DATE_FORMAT(hiking_date, '%Y-%m') = ?", '2024-03')
                                 .select(:hiking_date, :trail_name)
                                 .order(:hiking_date).length
mars_events = HikeHistory.where('hiking_date >= ?', 1.year.ago)
                                 .where("DATE_FORMAT(hiking_date, '%Y-%m') = ?", '2024-03')
                                 .select(:hiking_date, :trail_name)
                                 .order(:hiking_date).lenght
mars_events = HikeHistory.where('hiking_date >= ?', 1.year.ago)
                                 .where("DATE_FORMAT(hiking_date, '%Y-%m') = ?", '2024-03')
                                 .select(:hiking_date, :trail_name)
                                 .order(:hiking_date).count
mars_events = HikeHistory.where('hiking_date >= ?', 1.year.ago)
                                 .where("DATE_FORMAT(hiking_date, '%Y-%m') = ?", '2024-03')
                                 .select(:hiking_date, :trail_name)
                                 .order(:hiking_date)
stats = HikeHistory
                    .where('hiking_date >= ?', 1.year.ago)
                    .group("DATE_FORMAT(hiking_date, '%Y-%m')")
                    .count
                    .transform_keys { |k| Date.parse(k + '-01').strftime('%b') }
stats
continue
volumes:
      retries: 5
      timeout: 5s
      interval: 5s
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p$$MYSQL_ROOT_PASSWORD"]
    healthcheck:
      MYSQL_PASSWORD: password  # Optionnel: mot de passe utilisateur
      MYSQL_USER: progrando  # Optionnel: utilisateur dédié
      MYSQL_DATABASE: progrando
      MYSQL_ROOT_PASSWORD: password
    environment:
      - mariadb_data:/var/lib/mysql
    volumes:
      - "3307:3306"
    ports:
    image: mariadb:11.5.2  # Version spécifique pour plus de stabilité
  db:
  # Service for the MariaDB database
    stdin_open: true
    tty: true
      RAILS_ENV: development
      DATABASE_URL: mysql2://root:password@db:3306/progrando
    environment:
        condition: service_started
      db:
    depends_on:
      - .:/app
    volumes:
      - "3000:3000"
    ports:
    command: bash -c "rm -f /app/tmp/pids/server.pid && bundle exec rails s -p 3000 -b '0.0.0.0'"
    build: .
    user: "${UID}:${GID}"
  web:
  # Service for the Ruby on Rails web application
services:
